//
// Â© Copyright 2012 Carlos Quiroz. All rights reserved.
// All trademarks and service marks are the properties of their respective owners.
//
// This script is called when the devtools are opened
// We first try to detect if the inspected page contains a css file
// generated by Saas, and in that case a developer sidbar is opened
// Inspect the resources on the inspected window
chrome.devtools.inspectedWindow.getResources(setupSassSidebar);
var tabId = chrome.devtools.inspectedWindow.tabId;

/**
 * Called upon Developer Tools is opened with the list of the resources in the page
 * This function tries to determine if there are css files made using sass
 */
function setupSassSidebar(resources) {
    var cssResources = findCssResources(resources);
    findSassResources(cssResources);
}

/**
 * Finds what files are css on the resources list
 */
function findCssResources(resources) {
    var cssResources = [];
    for (var i = 0; i < resources.length; i++) {
        // We decide that the files ending with css are the ones assumed to be css
        // It could be better to actually parse the resource
        if (resources[i].url.search('\\.css') > 0) {
            cssResources.push(resources[i]);
        }
    }
    return cssResources;
}

/**
 * Read the css file content and try to find saas debugging information
 */
function findSassResources(cssResources) {
    var sassResources = [];
    var resourcesParsed = 0;
    for (var i = 0; i < cssResources.length; i++) {
        // Load each resources. The getContent call is asynchronous
        cssResources[i].getContent(function(content) {
            // Search for the marker of debug info
            if (content.search('-sass-debug-info') > 0) {
                sassResources.push(cssResources[i]);
            }
            resourcesParsed = resourcesParsed + 1;
            if (resourcesParsed === cssResources.length) {
                // Completed parsing of all css resources
                if (sassResources.length > 0) {

                    chrome.extension.sendRequest({ tabId: tabId }, function(results) {
                        buildSidebar(results);
                    });
                }
            }
        });
    }
}

/**
 * Functions that is called using evaluation and returns a JSON element
 * that is displayed on the sidebar
 *
 * As the function is evaluated as a string it cannot call other functions on
 * the file
 */
var pageFindSassInfo = function(element) {
    // $0 contains the element selected
    var data = $0;
    var sassValues = JSON.parse(element);
    // Make a shallow copy with a null prototype, so that sidebar does not
    // expose prototype.
    var props = Object.getOwnPropertyNames(data);
    var copy = {
        __proto__: null
    };
    var saas = {
        __proto__: null
    };
    var rules = window.getMatchedCSSRules(data, '')
    console.log('-- find matches for element ' + data + ' ------ ');
    for (var j = 0;j<rules.length;j++) {
        if (typeof sassValues[rules[j].selectorText] != 'undefined') {
            console.log('sass match ' + sassValues[rules[j].selectorText]['filename']);
        }
    }
    console.log('----------------------------------------------- ');
    for (var i = 0; i < props.length; ++i) {
        if (props[i] === "className") {
            // This is too limited, cannot assume that the elements in css
            // start with a dot
            var className = '.' + data[props[i]];
            if (typeof sassValues[className] != 'undefined') {
                saas['file'] = sassValues[className]['filename'];
                saas['linenum'] = sassValues[className]['linenum'];
                copy[className] = saas;
            }
        }
    }
    return copy;
}

/**
 * Creates the sidebar
 */
function buildSidebar(pageContents) {
    chrome.devtools.panels.elements.createSidebarPane("SASS", function(sidebar) {
        // on version 0.2 we display a page containing all found sass styles
        // sass has been found
        function updateElementProperties() {
            // The expression is a function text where we pass the parameter
            // and it is executed in the context of the elements panel
            // The page contents need to be passed as a string and re-parsed
            // inside
            var expression = "(" + pageFindSassInfo.toString() + ")('" + JSON.stringify(pageContents) + "');";
            sidebar.setExpression(expression);
        }
        chrome.devtools.panels.elements.onSelectionChanged.addListener(updateElementProperties);
    });
}

